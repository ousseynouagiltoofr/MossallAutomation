name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
 # schedule:
 #   - cron: '0 1 * * *'  # D√©clenche le workflow chaque jour √† 1h00 UTC
jobs:
  test:
    #timeout-minutes: 60
    runs-on: ubuntu-latest
    # Ajoute "permissions" pour s'assurer que le bot GitHub Actions dispose des droits de modification (write) sur le contenu du d√©p√¥t, ce qui est n√©cessaire pour pousser sur gh-pages.
    permissions:      
       contents: write  # Donne l'acc√®s en √©criture pour le contenu du d√©p√¥t sur gth-pages.
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests with Allure Report # Execution des tests avec le rapport Allure
      run: npm run test:allure

    - name: Upload Allure results # Sauvegarde du rapport Allure depuis le projet vers le CI
      uses: actions/upload-artifact@v4 
      with:
        name: allure-report
        path: allure-report  # Le r√©pertoire contenant le rapport g√©n√©r√© par Allure

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} # Utilise le token GitHub Actions pour publier le rapport
        publish_dir: ./allure-report  # R√©pertoire contenant les fichiers √† publier sur GitHub Pages
    - name: Notify Slack # Envoie une notification Slack avec le lien vers le rapport Allure. (d√©tails configuration √† voir sur le fichier README)
      run: |
            curl -X POST -H 'Content-type: application/json' --data '{"text":"üìä *Le rapport Allure est maintenant disponible !* üöÄ\n\nVous pouvez consulter le rapport complet en suivant ce lien : <https://mriama.github.io/Mossal/|Allure Report>"}' ${{ secrets.SLACK_WEBHOOK_MOSSAL }}
  